**The Kernel in the Real World
**現実世界におけるカーネル

Although the ideas presented here will
be new to many of you, they have already
been successfully applied in the
real world by both industry and academia.
In all cases they used the kernel
and practices developed by Ivar Jacobson
International. Early adopters of the kernel idea include:
ここで紹介されたアイデアは多くの皆さんにとって
新しいものであるにもかかわらず、すでに産学両方の現実世界において
成功事例として適用されている。
すべての例でIvar Jacobson Internationalが開発した
カーネルとプラクティスが使用されている。
カーネルアイデアの早期導入は以下を含む。

- MunichRe, the world’s leading reinsurance
company, where a family of
“collaboration models” has been assembled
to cover the whole spectrum
of software and application work. Four
collaboration models―exploratory,
standard, maintenance, and support―
have been built on the same kernel
from the same set of 12 practices.
- 世界の主要な再保険会社であるMunichReでは、
ソフトウェアとアプリケーション開発
のすべての領域をカバーするための
協働モデル（collaboration models）が整理されている。
4つの協働モデルは
調査、基準、保守、サポートであり、それぞれが12のプラクティス
からなる１つの共通カーネル上に構築されている。

- Fujitsu Services, where the Apt
Toolkit has been built on top of an early
version of the software-engineering
kernel, including both agile and waterfall
ways of working.
- Fujitsu Servicesでは、アジャイルとウォータフォールの
両方の仕事の仕方を想定したthe Apt Toolkitを
初期バージョンのカーネルで構築している。

- A major Japanese consumer electronics
company, where the software
processes have been defined on top of
an early version of the kernel, helping
teams apply new practices and manage
an offshore development vendor.
- 日本のある大手家電企業では、新しいプラクティスの適用や
オフショアの開発ベンダーのマネジメントを助ける用語に
初期バージョンのカーネルを使用してソフトウェアプロセスを定義している。

- KPN, where a kernel-based process
was adopted by more than 300 projects
across 13 programs as part of a move to
iterative development. The kernel also
provided the basis for a new results focused
QA process, which could be
applied to all projects regardless of the
method or practices used.

- KPNではカーネルベースのプロセスが繰り返し開発への
移行の一部として、13の工程に渡る300以上のプロジェクトで
採用されている。カーネルは品質プロセスに焦点を当てた
新たな成功の基礎も提供しており、
それは使用してきた方法論やプラクティスに依らず
すべてのプロジェクトに適用することができた。

- A major U.K. government department,
where a kernel-based agile
toolset was introduced to enable disciplined
agility and the tracking of
project progress and health in a practice-
independent fashion.
英国政府省庁ではカーネルベースのアジャイルツールセットが
導入された。それによってプラクティス非依存のやり方で、
規律ある機敏さ、プロジェクト進展と健康状態のトラッキングを
実現した。

The kernel is already being used in
first- and second-year software-engineering
courses at KTH Royal Institute
of Technology in Sweden. After students
in the first-year courses conducted
their projects, they went through
the SEMAT alphas and matched them
to their project results, under the direction
of Anders Sjogren. The students
had the opportunity to acquaint themselves
with and evaluate the alphas and
gain insight into the project’s progress
and health. In the second-year courses,
run by Mira Kajko-Mattsson, the students
were asked to use the SEMAT kernel
when running their projects along
with the development method they
followed. As shown in Figure 7, Kajko-
Mattsson created a software-development
scenario and evaluated it for each
alpha, its states, and the state checklist
items. The students were then asked
to do the same when conducting and
evaluating their projects.
カーネルはすでにスウェーデン王立工科大学(KTH)で
1－2年目のソフトウェアエンジニアリング課程に使用されている。
1年目の課程で学生は彼らのプロジェクトを進めた後で、
Anders Sjogrenの指導の下、彼らのプロジェクト結果を
SEMATのアルファと照らし合わせた。学生はその結果の理解と
アルファを評価する機会、そしてプロジェクトの進展と
健康状態を考察する機会を得た。
Mira Kajko-Mattssonが行った2年目の課程において、
学生は彼らが従った開発方法を用いてプロジェクトを進める時に
SEMATカーネルを使用するよう指示された。
Figure 7に示される様にKajko-Mattssonは
ソフトウェア開発シナリオを作成し、アルファ毎にその状態と
状態毎のチェックリストアイテムを評価した。
学生は彼らのプロジェクトの運営と評価時に同じことをするよう指示された。

The experiences of these courses
provided valuable lessons. For example,
the kernel assures that all the essential
aspects of software engineering
are considered in a project. By matching
the project results against the kernel
alphas, the students could easily
identify the good and bad sides of their
development methods. The kernel also
prepared students for future software engineering
endeavors with minimal
teaching effort. By following all the kernel
alphas, the students could learn the
total scope of the software-engineering
endeavor and thereby see what would
be required of them in their future as
professionals.

これらの課程を通した体験は有益な学びを提供した。
例えば、カーネルはソフトウェアエンジニアリングの
すべての必須な観点が、プロジェクトにおいて確実に熟慮されるようにする。
カーネルのアルファとプロジェクトの結果を照らし合わせることで、
学生は彼らの開発方法の良い面と悪い面を容易に識別することができた。
またカーネルは学生に最小限の学習努力で将来のソフトウェアエンジニアリング
活動に対する備えを与えた。
すべてのカーネルのアルファに従うことで、
学生はソフトウェアエンジニアリング活動の全範囲を
習得することができた。そしてそれによってプロフェッショナルとしての
彼らの将来において必要とされるものが何かを確かめることができた。

*How the kernel relates to agile and others
カーネルはアジャイルなどとどう関係するのか？

The kernel can be used with all
the popular management and technical
practices, including Scrum, Kanban,
risk-driven iterative, waterfall,
use-case-driven development, acceptance-
test-driven development, continuous
integration, and test-driven
development. It will help teams embarking
on the development of new
and innovative software products and
those involved in enhancing and maintaining
established software products.
It will help all sizes of teams from oneman
bands to 1,000-strong software-
engineering programs.
カーネルはスクラム、カンバン、リスク駆動イテレーティブ、
ウォータフォール、ユースケース駆動開発、
受け入れテスト駆動開発、
継続的インテグレーション、テスト駆動開発を含む
人気の高いマネジメントやテクニカルなプラクティスを採用することができる。
また、カーネルは新しく、革新的なソフトウェア製品の開発や
既存のソフトウェア製品の強化、メンテナンス
に取り組んでいるチームを手助けできる。
さらに単独から1000人強のソフトウェアエンジニアを
擁するチームまで手助けすることができる。

For example, the kernel supports
the values of the Agile Manifesto. With
its focus on checklists and results, and
its inherent practice independence,
it values individuals and interactions
over processes and tools. With its focus
on the needs of professional softwaredevelopment
teams, it values the way
of working and fulfilling team responsibilities
over methods.
例えば、カーネルはアジャイル宣言の「価値」を支持している。
特定のプラクティスに依存せず、チェックリストと
結果に焦点を当てることで、
プロセスやツールよりも、個人や個人間の対話に
価値をおいている。
また、プロフェッショナルなソフトウェア開発チームの
ニーズに焦点を当てることで、個々の開発手法よりも
、仕事の仕方とチームが責任を持って仕事をすることに価値をおいている。

The kernel does not in any way compete
with existing methods, be they
agile or anything else. On the contrary,
the kernel is agnostic to a team’s chosen
method. Even if a team is already
using a particular method, the kernel
can still help. Regardless of the method
used, as Robert Martin pointed out
in his foreword to The Essence of Software
Engineering, projects―even agile
ones―can get out of kilter, and when
they do, teams need to know more.
This is where the real value of the kernel
lies. It can guide a team in the actions
they need to take to get back on
course, to extend their method, or to
address a critical gap in their way of
working. It focuses on the needs of the
software professional and values the
"use of methods" over "the description
of method definitions" (as has been
normal in the past).
カーネルはアジャイルなどの既存の開発手法と競合しない。
むしろカーネルはチームが選択する手法にとらわれることはない。
チームがすでに特定の開発手法を使用している時でさえ、
カーネルは有用だ。
Robert Martinが"The Essense of Software Engineering"の
序文で指摘しているように、「プロジェクトは、
使用された開発手法によらず（仮にアジャイルであって）
時にうまく機能しなくなるものだ。そしてそうなった時は、
チームはさらに学ぶ必要がある。」
これこそ、カーネルの本質がやどる場所だ。
カーネルは、チームが自分たちのプロジェクトを順調に戻すために、
開発手法を拡張したり、あるいは仕事の仕方に関する重要なギャップに対処するときに
チームが取るべき行動をガイドすることができる。
カーネルはソフトウェアのプロフェッショナルのニーズに焦点を当て、
「開発手法の定義を記述すること」よりも
「開発方法を利用すること」に価値をおいている。
（過去は前者が開発手法の通常の役割だった）

The kernel does not just support
modern best practices; it also recognizes
that a vast amount of software is already
developed and needs to be maintained.
It will live for decades and will
have to be maintained in an efficient
way. This means the way you work with
this software will have to evolve alongside
the software itself. New practices
will need to be introduced in a way
that complements the ones already in
use. The kernel provides the mechanisms
to migrate legacy methods from
monolithic waterfall approaches to
more modern agile ones and beyond,
in an evolutionary way. It allows you to
change your legacy methods practiceby-
practice, while maintaining and improving
the teams’ ability to deliver.

カーネルは、最新のベストプラクティスだけをサポートしているわけではない。
膨大な量のソフトウェアがすでに開発され、
メンテナンスが必要とされていることを認識している。
それらは何十年も稼働し、効率的な方法で維持される必要がある。
これはあなたの仕事の仕方がこのソフトウェア自身と
一緒に進化しなければならないことを意味しており、
新しいプラクティスはすでに使用されているプラクティスを
補完する形で導入できる必要がある。
カーネルはソフトウェア自身の進化の過程において
既存の開発手法をモノシリックなウォータフォールアプローチから
より現代的なアジャイル、さらにそれより先の開発手法に
移行させるためのメカニズムを提供する。
これはあなたのチームの実行力を維持、向上しながら、
既存のプラクティスを１つずつ変更できることを示している。

*How the kernel will help you.
カーネルはあなたをどう助けてくれるか？

Use of the kernel has many benefits for experienced
or aspiring software professionals,
and for the teams they work
in. For example, it helps you assess
the progress and health of software development
endeavors, evaluate current
practices, and improve your way
of working. It also helps you improve
communication, move more easily between
teams, and adopt new ideas. It
will help the industry as a whole by improving
interoperability among teams,
suppliers, and development organizations.
カーネルの使用は経験豊富なソフトウェア開発者や
意欲的なソフトウェア開発者、そして彼らが参加する
チームに多くの利益を与える。例えば、カーネルは
ソフトウェア開発活動の進展や健康状態の診断、
現在取り組んでいるプラクティスの評価、
そして仕事の仕方の改善を手助けしてくれる。
また、コミュニケーションの改善や人のチーム間移動の
しやすさ、そして新しいアイデアの採用を手助けしてくれる。
カーネルはチーム、サプライヤ、および開発組織間の
相互運用の改善により産業界全体を手助けできるだろう。

By providing a practice-independent
foundation for the definition of
software methods, the kernel also has
the power completely to transform the
way that methods are defined and practices
are shared. For example, by allowing
teams to mix and match practices
from different sources to build and improve
their way of working, the kernel
addresses two of the key methodological
problems facing the industry:
カーネルは、プラクティスに依存せずに
ソフトウェア開発手法を定義する基盤を提供する。
これによって、
カーネルは開発手法の定義／プラクティスの共有の仕方を
完全に変革する力を持っている。
例えば、彼らの仕事の仕方を構築したり、改善するために
由来の異なるプラクティスを混在させたり
調和させる力をチームに与えることによって、
カーネルは産業界が直面している重要な2つの
方法論の問題解決に取り組んでいる。

- Teams are no longer trapped by
their methods; they can continuously
improve their way of working by adding
or removing practices when the situation
demands.
チームは、もはや自分たちの「方法論」に固執することはない。
チームは状況に応じてプラクティスを追加、削除して
絶え間なく仕事の仕方を改善することができる。

- Methodologists no longer need to
waste time describing complete methods;
they can easily describe their new
ideas in a concise and reusable way.
方法論者は、もはや完全な手法を記述するために時間を浪費することはない。
彼らは簡潔で再利用可能な方法で彼らの新たな考えを
容易に記述することができる。

Finally, the kernel benefits academia.
The kernel provides a basis for
the creation of foundation courses in
software engineering that can then be
complemented with additional courses
in specific practices―either as part
of the initial educational curriculum or
later during the student’s professional
development. Equally as important is
the kernel’s ability to act as a shared
reference model and enabler for further
research and experimentation.

最後に、カーネルは学会にとっても有益である。
カーネルは初期教育のカリキュラムの一部として、
あるいはその後の専門課程の間に特定プラクティスの
追加課程を補足することで完成するソフトウェアエンジニアリングの
一般教養課程の構築に基礎を提供する。
「共有されたリファレンスモデル」としてのカーネルの役割と
「更なる研究と実験を可能にするモデル」としてのカーネルの役割はともに
等しく重要である。
