**The Kernel in the Real World
**現実世界におけるカーネル

Although the ideas presented here will
be new to many of you, they have already
been successfully applied in the
real world by both industry and academia.
In all cases they used the kernel
and practices developed by Ivar Jacobson
International. Early adopters of the kernel idea include:

ここで紹介されたアイデアは多くの皆さんにとって新しいものであるにもかかわらず、すでに産学両方の現実世界において適用され成功を収めている。すべての事例でIvar Jacobson Internationalが開発したカーネルとプラクティスが使用されている。カーネルのアイデアを早期に採用した組織として以下がある。

- MunichRe, the world’s leading reinsurance
company, where a family of
“collaboration models” has been assembled
to cover the whole spectrum
of software and application work. Four
collaboration models―exploratory,
standard, maintenance, and support―
have been built on the same kernel
from the same set of 12 practices.

* 再保険に関する世界的リーディング企業であるMunichReでは、ソフトウェアとアプリケーション開発のすべての領域をカバーするための協働モデル（collaboration models）を整理している。調査、基準、保守、サポートの4つの協働モデルがあり、それぞれ共通カーネル上で12のプラクティスセットから構築されている。

- Fujitsu Services, where the Apt
Toolkit has been built on top of an early
version of the software-engineering
kernel, including both agile and waterfall
ways of working.

* Fujitsu Servicesでは、アジャイルとウォータフォールの両方の仕事の仕方を想定した「Aptツールキット（the Apt Toolkit）（訳注: Aptは「Appropriate; 適切」の意味）を初期バージョンのカーネル上に構築している。

- A major Japanese consumer electronics
company, where the software
processes have been defined on top of
an early version of the kernel, helping
teams apply new practices and manage
an offshore development vendor.

- 日本のある大手家電メーカでは、チームによる新プラクティスの適用やオフショア開発ベンダーのマネジメントを支援するために、初期バージョンのカーネル上でソフトウェアプロセスを定義している。

- KPN, where a kernel-based process
was adopted by more than 300 projects
across 13 programs as part of a move to
iterative development. The kernel also
provided the basis for a new results-focused
QA process, which could be
applied to all projects regardless of the
method or practices used.

* KPNではイテラティブな開発（iterative development; 反復的開発）への移行の一環として、13の計画に渡り300以上のプロジェクトで採用されている。さらにカーネルは、結果を重視する新たな品質保証プロセスの基礎を提供し、そのプロセスは用いる方法論やプラクティスの違いにかかわらずあらゆるプロジェクトに適用できた。

- A major U.K. government department,
where a kernel-based agile
toolset was introduced to enable disciplined
agility and the tracking of
project progress and health in a practice-
independent fashion.

* 英国政府のある省庁では、カーネルに基づいたアジャイルツールセットが導入されている。ツールセットの導入によりプラクティス非依存の形で、規律ある機敏さ（disciplined agility）と、プロジェクトの進展や健全性の追跡を実現している。

The kernel is already being used in first- and second-year software-engineering
courses at KTH Royal Institute of Technology in Sweden. After students in the first-year courses conducted their projects, they went through the SEMAT alphas and matched them to their project results, under the direction of Anders Sjogren. The students had the opportunity to acquaint themselves with and evaluate the alphas and gain insight into the project’s progress and health. In the second-year courses, run by Mira Kajko-Mattsson, the students were asked to use the SEMAT kernel when running their projects along with the development method they followed. As shown in Figure 7, Kajko-Mattsson created a software-development scenario and evaluated it for each alpha, its states, and the state checklist items. The students were then asked to do the same when conducting and evaluating their projects.

カーネルはすでにスウェーデン王立工科大学(KTH)で、1-2年目のソフトウェアエンジニアリングコースに利用されている。学生は1年目にプロジェクトを進めた後で、Anders Sjogrenの指導の下、プロジェクトの結果をSEMATのアルファと照らし合わせた。学生はアルファに精通し評価する機会を得て、さらには、プロジェクトの進展と健全性を考察できた。学生は2年目にMira Kajko-Mattssonにより、開発方法論に従ってプロジェクトを進めるにあたり、SEMATカーネルを使用するよう指示された。図7に示す様にKajko-Mattssonは、ソフトウェア開発シナリオを作成し、アルファ毎にその状態と状態毎のチェックリスト項目を評価した。そして学生は、プロジェクトの運営と評価にあたり同じことをするように指示された。

The experiences of these courses provided valuable lessons. For example, the kernel assures that all the essential aspects of software engineering are considered in a project. By matching the project results against the kernel alphas, the students could easily identify the good and bad sides of their 
development methods. The kernel also prepared students for future software engineering endeavors with minimal teaching effort. By following all the kernel
alphas, the students could learn the total scope of the software-engineering endeavor and thereby see what would be required of them in their future as
professionals.

これらのコースを通した体験を通じて、有益な学びがもたらされた。例えば、カーネルによって、ソフトウェアエンジニアリングのすべての本質的な側面がプロジェクトで確実に考慮されるようになる。プロジェクトの結果をカーネルのアルファに照らし合わせることで、学生は彼らの開発方法論の良い面と悪い面を容易に識別できた。またカーネルは、教育活動を最小に抑えて、将来のソフトウェアエンジニアリングの取り組みに対する備えを学生に与えた。カーネルの全てのアルファに従うことで、学生はソフトウェアエンジニアリングの取り組みの全範囲を習得でき、将来プロフェッショナルとして必要とされるものを確かめることができた。

*How the kernel relates to agile and others
カーネルはアジャイルその他とどのように関係しているのか？

The kernel can be used with all the popular management and technical
practices, including Scrum, Kanban, risk-driven iterative, waterfall, use-case-driven development, acceptance-test-driven development, continuous integration, and test-driven development. It will help teams embarking on the development of new and innovative software products and those involved in enhancing and maintaining established software products. It will help all sizes of teams from oneman bands to 1,000-strong software-engineering programs.

カーネルは、スクラム、カンバン、リスク駆動イテラティブ、ウォータフォール、ユースケース駆動開発、受け入れテスト駆動開発、継続的インテグレーション、テスト駆動開発といった人気の高いマネジメントや技術上のプラクティスと共に利用できる。またカーネルは、革新的なソフトウェア製品の新開発に加えて、既存のソフトウェア製品の強化や保守に取り組んでいるチームを支援する。さらには、単独から1000人強まで、あらゆるチームサイズのソフトウェアエンジニアリング計画を支援する。

For example, the kernel supports the values of the Agile Manifesto. With
its focus on checklists and results, and its inherent practice independence,
it values individuals and interactions over processes and tools. With its focus
on the needs of professional software development teams, it values the way
of working and fulfilling team responsibilities over methods.

例えば、カーネルはアジャイル宣言における「価値」を支持している。カーネルは特定のプラクティスに依存せず、チェックリストと結果に焦点を当てることで、プロセスやツールよりも、個人や個人間の対話に価値をおいている。また、プロフェッショナルなソフトウェア開発チームの必要性に焦点を当てることで、開発方法論よりも、仕事の仕方およびチームの責務遂行に価値をおいている。

The kernel does not in any way compete with existing methods, be they agile or anything else. On the contrary, the kernel is agnostic to a team’s chosen method. Even if a team is already using a particular method, the kernel can still help. Regardless of the method used, as Robert Martin pointed out in his foreword to The Essence of Software Engineering, projects―even agile ones―can get out of kilter, and when they do, teams need to know more. This is where the real value of the kernel lies. It can guide a team in the actions they need to take to get back on course, to extend their method, or to address a critical gap in their way of working. It focuses on the needs of the software professional and values the "use of methods" over "the description of method definitions" (as has been normal in the past).

カーネルは、アジャイルなどの既存の開発方法論と競合しない。むしろカーネルは、チームが選択する方法論にとらわれることはない。チームがすでに特定の開発方法論を使用している時でさえ、カーネルは有用である。Robert Martinが『The Essense of Software Engineering』の序文で指摘しているように、プロジェクトは（仮にアジャイルなものであっても）用いる方法論によらず時にうまく行かなくなるものであり、そうなった時にチームはさらに学ぶ必要がある。そのような時、カーネルは真価を発揮する。カーネルは、チームがプロジェクトを順調な状態へと戻したり、方法論を拡張したり、仕事の仕方に関する重大なギャップに対処するときに、チームが取るべき行動をガイドできる。カーネルはソフトウェアのプロフェッショナルのニーズに焦点を当て、
「方法論の定義を記述すること」よりも「方法論を利用すること」に価値をおいている
（従来は前者が通常であった）。

The kernel does not just support modern best practices; it also recognizes that a vast amount of software is already developed and needs to be maintained. It will live for decades and will have to be maintained in an efficient way. This means the way you work with this software will have to evolve alongside the software itself. New practices will need to be introduced in a way that complements the ones already in use. The kernel provides the mechanisms to migrate legacy methods from monolithic waterfall approaches to more modern agile ones and beyond, in an evolutionary way. It allows you to change your legacy methods practice-by-practice, while maintaining and improving the teams’ ability to deliver.

カーネルは、最新のベストプラクティスのみをサポートしているわけではない。膨大な量のソフトウェアがすでに開発され、保守される必要があることは認識済みである。それらのソフトウェアは何十年も稼働し、効率的な方法で維持される必要がある。これは、仕事の仕方がソフトウェアそのものと一緒に進化しなければならないことを意味し、新しいプラクティスはすでに使用されているプラクティスを補完する形で導入できる必要がある。カーネルは、長年使われた方法論を、融通の利かないウォータフォールアプローチからより現代的なアジャイル、さらにはその先の方法論へと進化的な方法で移行させる仕組みを提供する。具体的には、チームのソフトウェア提供力を維持し向上させながら、長年使われた方法論をプラクティス毎に変更できる。

*How the kernel will help you.
カーネルはあなたをどのように支援するのか？

Use of the kernel has many benefits for experienced or aspiring software professionals, and for the teams they work in. For example, it helps you assess
the progress and health of software development endeavors, evaluate current
practices, and improve your way of working. It also helps you improve communication, move more easily between teams, and adopt new ideas. It
will help the industry as a whole by improving interoperability among teams, suppliers, and development organizations.

カーネルの利用により、経験豊富なソフトウェア開発者や意欲的な開発者、そして彼らが働くチームに多くの利益がもたらされる。例えばカーネルは、ソフトウェア開発の取り組みの進展や健全性の診断、現在取り組んでいるプラクティスの評価、そして仕事の仕方の改善を支援する。また、コミュニケーションの改善や、個人の容易なチーム間の移動、さらには新しいアイデアの採用を支援する。さらにはカーネルは、チーム、サプライヤ、および開発組織間の相互運用の改善を通じて、産業界全体を支援するだろう。

By providing a practice-independent foundation for the definition of software methods, the kernel also has the power completely to transform the way that methods are defined and practices are shared. For example, by allowing teams to mix and match practices from different sources to build and improve their way of working, the kernel addresses two of the key methodological problems facing the industry:

カーネルは、プラクティス非依存に方法論を定義する基盤を提供することで、カーネルは方法論の定義やプラクティスの共有の仕方を根本的に変革させる力を持っている。例えば、チームが由来の異なるプラクティスを混在および調和させて仕事の仕方を構築し改善することが可能となる。これにより、カーネルは産業界が直面している以下の重要な2つの方法論上の問題に取り組んでいる。

- Teams are no longer trapped by
their methods; they can continuously
improve their way of working by adding
or removing practices when the situation
demands.

* チームは、もはや自分たちの方法論に固執することはない。チームは状況に応じてプラクティスを追加および削除して、絶え間なく仕事の仕方を改善できる。

- Methodologists no longer need to
waste time describing complete methods;
they can easily describe their new
ideas in a concise and reusable way.

* 方法論者は、もはや完全な方法論を記述するために時間を浪費する必要はない。方法論者は、新しいアイディアを簡潔かつ再利用可能な方法で容易に記述できる。

Finally, the kernel benefits academia. The kernel provides a basis for the creation of foundation courses in software engineering that can then be complemented with additional courses in specific practices―either as part of the initial educational curriculum or later during the student’s professional development. Equally as important is the kernel’s ability to act as a shared reference model and enabler for further research and experimentation.

最後に、カーネルは学界（academia）にとっても有益である。カーネルは、初期の教養課程やより後の専門課程の一部として、ソフトウェアエンジニアリングの基礎的コースの構築の基礎を与え、そしてそのようなコースは特定プラクティスに関する追加コースにより補完できる。さらに、カーネルが共通の参照モデルとして機能し、さらなる研究と実験を可能にする点も同様に重要である。
